module Y21.TestD18 where

import           Test.Hspec

import           Imports
import           Parser
import           Y21.D18

spec :: Spec
spec = do
    let p = parseOrDie tree

    it "exp'" $ do
        p "[1,2]"           `shouldBe` Pair (Lit 1) (Lit 2)
        p "[[1,2],3]"       `shouldBe` Pair (Pair (Lit 1) (Lit 2)) (Lit 3)
        p "[9,[8,7]]"       `shouldBe` Pair (Lit 9) (Pair (Lit 8) (Lit 7))
        p "[[1,9],[8,5]]"   `shouldBe` Pair (Pair (Lit 1) (Lit 9)) (Pair (Lit 8) (Lit 5))

    it "explode" $ do
        explode (p "[[[[[9,8],1],2],3],4]") `shouldBe` Just (p "[[[[0,9],2],3],4]")
        --               ^^^  +                                     ^ +
        explode (p "[7,[6,[5,[4,[3,2]]]]]") `shouldBe` Just (p "[7,[6,[5,[7,0]]]]")
        --                    +  ^^^                                      + ^
        explode (p "[[6,[5,[4,[3,2]]]],1]") `shouldBe` Just (p "[[6,[5,[7,0]]],3]")
        --                  +  ^^^     +                                + ^    +

        explode (p "[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]")
        --                  +  ^^^      +
            `shouldBe` Just (p "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]")
        --                               + ^     +

        explode (p "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]")
        --                                + ^^^^
            `shouldBe` Just (p "[[3,[2,[8,0]]],[9,[5,[7,0]]]]")
        --                                            + ^

    it "split" $ do
        split (p "[10,2]")      `shouldBe` Just (p "[[5,5],2]")
        split (p "[11,2]")      `shouldBe` Just (p "[[5,6],2]")
        split (p "[12,2]")      `shouldBe` Just (p "[[6,6],2]")

        split (p "[10,10]")     `shouldBe` Just (p "[[5,5],10]")
        split (p "[[5,5],10]")  `shouldBe` Just (p "[[5,5],[5,5]]")

    it "add" $ do
        foldl1 add (fmap p ["[1,1]", "[2,2]", "[3,3]", "[4,4]"])
            `shouldBe` p "[[[[1,1],[2,2]],[3,3]],[4,4]]"

        foldl1 add (fmap p ["[1,1]", "[2,2]", "[3,3]", "[4,4]", "[5,5]"])
            `shouldBe` p "[[[[3,0],[5,3]],[4,4]],[5,5]]"

        foldl1 add (fmap p ["[1,1]", "[2,2]", "[3,3]", "[4,4]", "[5,5]", "[6,6]"])
            `shouldBe` p "[[[[5,0],[7,4]],[5,5]],[6,6]]"

    it "add (steps)" $ do
        add (p "[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]")
            (p "[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]")
            `shouldBe` p "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]"

        add (p "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]")
            (p "[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]")
            `shouldBe` p "[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]"

        add (p "[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]")
            (p "[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]")
            `shouldBe` p "[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]"

        add (p "[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]")
            (p "[7,[5,[[3,8],[1,4]]]]")
            `shouldBe` p "[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]"

        add (p "[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]")
            (p "[[2,[2,2]],[8,[8,1]]]")
            `shouldBe` p "[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]"

        add (p "[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]")
            (p "[2,9]")
            `shouldBe` p "[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]"

        add (p "[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]")
            (p "[1,[[[9,3],9],[[9,0],[0,7]]]]")
            `shouldBe` p "[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]"

        add (p "[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]")
            (p "[[[5,[7,4]],7],1]")
            `shouldBe` p "[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]"

        add (p "[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]")
            (p "[[[[4,2],2],6],[8,7]]")
            `shouldBe` p "[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]"


    it "magnitude" $ do
        magnitude (p "[9,1]")                                                   `shouldBe`   29
        magnitude (p "[1,9]")                                                   `shouldBe`   21
        magnitude (p "[[9,1],[1,9]]")                                           `shouldBe`  129
        magnitude (p "[[1,2],[[3,4],5]]")                                       `shouldBe`  143
        magnitude (p "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]")                       `shouldBe` 1384
        magnitude (p "[[[[1,1],[2,2]],[3,3]],[4,4]]")                           `shouldBe`  445
        magnitude (p "[[[[3,0],[5,3]],[4,4]],[5,5]]")                           `shouldBe`  791
        magnitude (p "[[[[5,0],[7,4]],[5,5]],[6,6]]")                           `shouldBe` 1137
        magnitude (p "[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]")   `shouldBe` 3488

    it "add + magnitude" $ do
        let r = [ "[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]"
                , "[[[5,[2,8]],4],[5,[[9,9],0]]]"
                , "[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]"
                , "[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]"
                , "[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]"
                , "[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]"
                , "[[[[5,4],[7,7]],8],[[8,3],8]]"
                , "[[9,3],[[9,9],[6,[4,9]]]]"
                , "[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]"
                , "[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]"
                ]
                & fmap p
                & foldl1 add

        r `shouldBe` p "[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]"
        magnitude r `shouldBe` 4140
